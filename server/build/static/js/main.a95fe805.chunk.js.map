{"version":3,"sources":["components/TodoList.js","context/themeContext.js","components/Appbar.js","context/taskContext.js","components/ConfirmDelete.js","components/PickDateAndTime.js","components/TaskForm.js","components/AddTask.js","components/Feedback.js","App.js","serviceWorker.js","index.js"],"names":["task_id","themeContext","createContext","ThemeContextProvider","props","useState","lightMode","setLightMode","theme","createMuiTheme","palette","primary","light","main","dark","blue","type","useEffect","timeOfDay","Date","getHours","Provider","value","handleTheme","children","useStyles","makeStyles","root","display","justifyContent","width","classes","useContext","navList","fontSize","List","className","map","member","index","ListItem","key","style","IconButton","onClick","taskContext","TaskContextProvider","tasks","setTasks","loading","error","state","setState","open","message","feedback","setFeedback","fetchTasks","a","Axios","get","res","data","console","log","response","addTask","task","post","editTask","id","put","deleteTask","delete","today","getDate","expTime","status","_id","handleTaskUpdate","updatedTask","cpTasks","find","indexOf","handleDelete","filter","handleCompleted","ConfirmDelete","handleClose","Dialog","onClose","DialogContent","DialogContentText","component","Typography","variant","color","DialogActions","Button","_","autoFocus","position","top","left","height","alignItems","boxShadow","zIndex","TodoList","setOpen","title","description","taskUpdate","setTaskUpdate","editMode","setEditMode","selectDate","setSelectDate","completedStyles","fontStyle","textDecoration","opacity","handleInput","name","event","target","handleStopEditMode","restOfMembers","CircularProgress","ExpansionPanel","ExpansionPanelSummary","includes","flexGrow","TextField","size","placeholder","onChange","onFocus","defaultValue","paddingTop","textTransform","FormControlLabel","aria-label","control","Switch","checked","ExpansionPanelDetails","Grid","container","justify","fullWidth","multiline","rows","align","ExpansionPanelActions","marginLeft","utils","DateFnsUtils","DateTimePicker","onBlur","onError","fontWeight","time","timeArray","toLocaleTimeString","split","ampm","pop","join","formatTime","toDateString","marginTop","Fab","margin","disabled","handleEditMode","PickDateAndTime","date","handleDateTimeChange","disablePast","format","TaskForm","toISOString","setTask","DialogTitle","spacing","item","xs","toUTCString","AddTask","bottom","Feedback","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","severity","App","CssBaseline","Appbar","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a95fe805.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\"\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\"\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\"\r\nimport ExpansionPanelActions from \"@material-ui/core/ExpansionPanelActions\"\r\nimport Fab from \"@material-ui/core/Fab\"\r\nimport List from \"@material-ui/core/List\"\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport Switch from \"@material-ui/core/Switch\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport DeleteIcon from \"@material-ui/icons/Delete\"\r\nimport EditIcon from \"@material-ui/icons/Edit\"\r\nimport ConfirmDelete from \"./ConfirmDelete\"\r\nimport DateFnsUtils from \"@date-io/date-fns\"\r\nimport { DateTimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\"\r\nimport { taskContext } from \"../context/taskContext\"\r\n\r\nlet task_id\r\n\r\nconst style = {\r\n  position: \"fixed\",\r\n  top: 0,\r\n  left: 0,\r\n  height: \"100vh\",\r\n  width: \"100%\",\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n  boxShadow: \"inset 100vw 10px 10px 10px #3333\",\r\n  zIndex: 100\r\n}\r\n\r\nconst TodoList = () => {\r\n  const {\r\n    state: { loading, error },\r\n    tasks,\r\n    handleCompleted,\r\n    handleTaskUpdate\r\n  } = useContext(taskContext)\r\n  const [open, setOpen] = useState(false)\r\n  const [taskUpdate, setTaskUpdate] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n    expTime: \"\",\r\n    status: \"\"\r\n  })\r\n  console.log(tasks)\r\n  const [editMode, setEditMode] = useState([])\r\n  const [selectDate, setSelectDate] = useState()\r\n\r\n  const completedStyles = {\r\n    fontStyle: \"italic\",\r\n    textDecoration: \"line-through\",\r\n    opacity: 0.5\r\n  }\r\n\r\n  const handleOpen = () => setOpen(true)\r\n  const handleClose = () => setOpen(false)\r\n\r\n  const handleInput = (name, task) => event => {\r\n    setTaskUpdate({ ...task, [name]: event.target.value })\r\n  }\r\n\r\n  const handleEditMode = task => {\r\n    setSelectDate(task.expTime)\r\n    setEditMode([...editMode, task._id])\r\n  }\r\n\r\n  const handleStopEditMode = id => {\r\n    const cpEditMode = [...editMode]\r\n    const restOfMembers = cpEditMode.filter(member => member !== id)\r\n    setEditMode(restOfMembers)\r\n  }\r\n\r\n  const today = new Date()\r\n\r\n  const formatTime = time => {\r\n    const timeArray = time.toLocaleTimeString().split(\":\")\r\n    const ampm = timeArray[2].split(\" \")[1]\r\n    timeArray.pop()\r\n    const newFormat = `${timeArray.join(\":\")} ${ampm}`\r\n\r\n    return newFormat\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div style={style}>\r\n          {console.log(\"loading\")}\r\n          <CircularProgress />\r\n        </div>\r\n      ) : null}\r\n      {error ? (\r\n        <Typography variant=\"h2\" color=\"error\">\r\n          {error}\r\n        </Typography>\r\n      ) : (\r\n        <>\r\n          <List>\r\n            {tasks.map(task => (\r\n              <ListItem key={task._id}>\r\n                <ExpansionPanel style={{ width: \"100%\" }}>\r\n                  <ExpansionPanelSummary>\r\n                    {editMode.includes(task._id) ? (\r\n                      <div style={{ flexGrow: 1 }}>\r\n                        <TextField\r\n                          name=\"title\"\r\n                          variant=\"outlined\"\r\n                          type=\"text\"\r\n                          size=\"small\"\r\n                          placeholder=\"Add title\"\r\n                          onChange={handleInput(\"title\", task)}\r\n                          onFocus={handleInput(\"title\", task)}\r\n                          defaultValue={task.title}\r\n                          autoFocus\r\n                        />\r\n                      </div>\r\n                    ) : (\r\n                      <Typography\r\n                        variant=\"h6\"\r\n                        style={\r\n                          task.status\r\n                            ? {\r\n                                ...completedStyles,\r\n                                flexGrow: 1,\r\n                                paddingTop: 7,\r\n                                textTransform: \"capitalize\"\r\n                              }\r\n                            : {\r\n                                flexGrow: 1,\r\n                                paddingTop: 7,\r\n                                textTransform: \"capitalize\"\r\n                              }\r\n                        }\r\n                      >\r\n                        {task.title}\r\n                      </Typography>\r\n                    )}\r\n                    <FormControlLabel\r\n                      aria-label=\"Task Status\"\r\n                      onChange={_ => handleCompleted(task)}\r\n                      control={\r\n                        <Switch\r\n                          color=\"primary\"\r\n                          checked={task.status}\r\n                          onChange={_ => handleCompleted(task._id, taskUpdate)}\r\n                        />\r\n                      }\r\n                    />\r\n                    <IconButton\r\n                      onClick={_ => {\r\n                        task_id = task._id\r\n                        handleOpen()\r\n                      }}\r\n                    >\r\n                      <DeleteIcon color=\"secondary\" />\r\n                    </IconButton>\r\n                  </ExpansionPanelSummary>\r\n                  <ExpansionPanelDetails>\r\n                    {editMode.includes(task._id) ? (\r\n                      <Grid container justify=\"flex-end\">\r\n                        <TextField\r\n                          name=\"description\"\r\n                          type=\"text\"\r\n                          variant=\"outlined\"\r\n                          size=\"small\"\r\n                          placeholder=\"Description\"\r\n                          onChange={handleInput(\"description\", task)}\r\n                          fullWidth\r\n                          multiline\r\n                          rows=\"4\"\r\n                          defaultValue={task.description}\r\n                        />\r\n                      </Grid>\r\n                    ) : (\r\n                      <Typography\r\n                        variant=\"subtitle2\"\r\n                        color=\"textSecondary\"\r\n                        align=\"center\"\r\n                        component=\"p\"\r\n                        style={{ width: \"100%\" }}\r\n                      >\r\n                        {task.description}\r\n                      </Typography>\r\n                    )}\r\n                  </ExpansionPanelDetails>\r\n                  <ExpansionPanelActions>\r\n                    <div\r\n                      style={{\r\n                        marginLeft: 20,\r\n                        flexGrow: 1\r\n                      }}\r\n                    >\r\n                      {editMode.includes(task._id) ? (\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                          <DateTimePicker\r\n                            variant=\"inline\"\r\n                            value={selectDate}\r\n                            onChange={setSelectDate}\r\n                            onBlur={_ =>\r\n                              setTaskUpdate({ ...task, expTime: selectDate })\r\n                            }\r\n                            onError={console.log}\r\n                            placeholder=\"Date and Time of activity\"\r\n                          />\r\n                        </MuiPickersUtilsProvider>\r\n                      ) : (\r\n                        <Typography\r\n                          variant=\"caption\"\r\n                          color={task.status ? \"textSecondary\" : \"primary\"}\r\n                          component=\"small\"\r\n                          style={{ fontWeight: \"bolder\" }}\r\n                        >\r\n                          {new Date(task.expTime).getDate() === today.getDate()\r\n                            ? formatTime(new Date(task.expTime))\r\n                            : new Date(task.expTime).toDateString()}\r\n                        </Typography>\r\n                      )}\r\n                    </div>\r\n                    {editMode.includes(task._id) ? (\r\n                      <div style={{ marginTop: 15 }}>\r\n                        <Button\r\n                          color=\"primary\"\r\n                          onClick={_ => handleStopEditMode(task._id)}\r\n                        >\r\n                          Close\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          onClick={_ => {\r\n                            handleTaskUpdate(task._id, taskUpdate)\r\n                            handleStopEditMode(task._id)\r\n                          }}\r\n                        >\r\n                          Done\r\n                        </Button>\r\n                      </div>\r\n                    ) : (\r\n                      <Fab\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        style={{ margin: 15 }}\r\n                        disabled={task.status}\r\n                        onClick={_ => handleEditMode(task)}\r\n                      >\r\n                        <EditIcon fontSize=\"small\" />\r\n                      </Fab>\r\n                    )}\r\n                  </ExpansionPanelActions>\r\n                </ExpansionPanel>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n          <ConfirmDelete\r\n            open={open}\r\n            handleClose={handleClose}\r\n            task_id={task_id}\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TodoList\r\n","import React, { createContext, useState, useEffect } from \"react\"\r\nimport { createMuiTheme } from \"@material-ui/core\"\r\nimport { blue } from \"@material-ui/core/colors\"\r\n\r\nexport const themeContext = createContext()\r\n\r\nconst ThemeContextProvider = props => {\r\n  const [lightMode, setLightMode] = useState(true)\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      primary: !lightMode\r\n        ? {\r\n            main: blue[500],\r\n            light: blue[200],\r\n            dark: blue[800]\r\n          }\r\n        : {\r\n            light: \"#7986cb\",\r\n            main: \"#3f51b5\",\r\n            dark: \"#303f9f\"\r\n          },\r\n      type: lightMode ? \"light\" : \"dark\"\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    const timeOfDay = new Date().getHours()\r\n    timeOfDay >= 19 || timeOfDay <= 6 ? setLightMode(false) : setLightMode(true)\r\n  }, [])\r\n\r\n  const handleTheme = () => setLightMode(!lightMode)\r\n\r\n  return (\r\n    <themeContext.Provider value={{ theme, handleTheme, lightMode }}>\r\n      {props.children}\r\n    </themeContext.Provider>\r\n  )\r\n}\r\n\r\nexport default ThemeContextProvider\r\n","import React, { useContext } from \"react\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport { List, ListItem, IconButton } from \"@material-ui/core\"\r\nimport MenuIcon from \"@material-ui/icons/Menu\"\r\nimport AccountIcon from \"@material-ui/icons/Person\"\r\nimport Brightness7Icon from \"@material-ui/icons/Brightness7\"\r\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\"\r\nimport { themeContext } from \"../context/themeContext\"\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    width: \"100%\"\r\n  }\r\n}))\r\n\r\nexport default () => {\r\n  const classes = useStyles()\r\n  const { lightMode, handleTheme } = useContext(themeContext)\r\n\r\n  const navList = [\r\n    <MenuIcon />,\r\n    lightMode ? (\r\n      <Brightness4Icon fontSize=\"large\" />\r\n    ) : (\r\n      <Brightness7Icon fontSize=\"large\" />\r\n    ),\r\n    <AccountIcon />\r\n  ]\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      {navList.map((member, index) => (\r\n        <ListItem key={index} style={{ justifyContent: \"center\" }}>\r\n          <IconButton onClick={index === 1 ? handleTheme : null}>\r\n            {member}\r\n          </IconButton>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  )\r\n}\r\n","import React, { createContext, useState, useEffect } from \"react\"\r\nimport Axios from \"axios\"\r\n\r\nexport const taskContext = createContext()\r\n\r\nconst TaskContextProvider = props => {\r\n  const [tasks, setTasks] = useState([])\r\n  const [state, setState] = useState({\r\n    loading: false,\r\n    error: \"\"\r\n  })\r\n  const [feedback, setFeedback] = useState({\r\n    open: false,\r\n    message: \"\"\r\n  })\r\n\r\n  const fetchTasks = async () => {\r\n    try {\r\n      setState({ ...state, loading: true })\r\n      const res = await Axios.get(\"/api/tasks\")\r\n      const data = res.data\r\n      setState({ loading: false, error: \"\" })\r\n      setTasks(data)\r\n    } catch (err) {\r\n      console.log(err.response)\r\n      setState({ loading: false, error: err.response.message })\r\n    }\r\n  }\r\n\r\n  const addTask = async task => {\r\n    try {\r\n      setState({ ...state, loading: true })\r\n      const res = await Axios.post(\"/api/tasks\", task)\r\n      const data = res.data\r\n      setFeedback({ open: true, message: \"Task added Successfully!\" })\r\n      setState({ loading: false, error: \"\" })\r\n      setTasks([data, ...tasks])\r\n    } catch (err) {\r\n      console.log(err.response.data)\r\n      setState({ loading: false, error: err.response.message })\r\n    }\r\n  }\r\n\r\n  const editTask = async (id, task) => {\r\n    try {\r\n      setState({ ...state, loading: true })\r\n      await Axios.put(`/api/tasks/${id}`, task)\r\n      setFeedback({ open: true, message: \"Task Updated Successfully!\" })\r\n      setState({ loading: false, error: \"\" })\r\n    } catch (err) {\r\n      console.log(err.response.data)\r\n      setState({ loading: false, error: err.response.message })\r\n    }\r\n  }\r\n\r\n  const deleteTask = async id => {\r\n    try {\r\n      const res = await Axios.delete(`/api/tasks/${id}`)\r\n      const data = res.data\r\n      setFeedback({ open: true, message: data.message })\r\n    } catch (err) {\r\n      console.log(err.response.data)\r\n    }\r\n  }\r\n\r\n  const handleDelete = id => {\r\n    deleteTask(id)\r\n    const cpTasks = tasks.filter(task => task._id !== id)\r\n    setState({ ...state, error: \"\" })\r\n    setTasks([...cpTasks])\r\n  }\r\n\r\n  const handleCompleted = id => {\r\n    const cpTasks = [...tasks]\r\n    const task = cpTasks.find(task => task._id === id)\r\n    task.status = !task.status\r\n    editTask(id, task)\r\n    setState({ ...state, error: \"\" })\r\n    setTasks([...cpTasks])\r\n  }\r\n\r\n  const handleTaskUpdate = (id, updatedTask) => {\r\n    const cpTasks = [...tasks]\r\n\r\n    const task = cpTasks.find(task => task._id === id)\r\n    cpTasks[cpTasks.indexOf(task)] = updatedTask\r\n\r\n    editTask(id, updatedTask)\r\n    setState({ ...state, error: \"\" })\r\n    setTasks([...cpTasks])\r\n  }\r\n\r\n  ;(function() {\r\n    const today = new Date()\r\n\r\n    for (const task of tasks) {\r\n      if (\r\n        today.getDate() - new Date(task.expTime).getDate() >= 1 &&\r\n        today.getHours() >= new Date(task.expTime).getHours() &&\r\n        task.status\r\n      ) {\r\n        deleteTask(task._id)\r\n      }\r\n    }\r\n  })()\r\n\r\n  useEffect(() => {\r\n    fetchTasks()\r\n  }, [])\r\n\r\n  return (\r\n    <taskContext.Provider\r\n      value={{\r\n        tasks,\r\n        state,\r\n        addTask,\r\n        feedback,\r\n        setFeedback,\r\n        handleTaskUpdate,\r\n        handleDelete,\r\n        handleCompleted\r\n      }}\r\n    >\r\n      {props.children}\r\n    </taskContext.Provider>\r\n  )\r\n}\r\n\r\nexport default TaskContextProvider\r\n","import React, { useContext } from \"react\"\r\nimport Dialog from \"@material-ui/core/Dialog\"\r\nimport {\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  Button,\r\n  Typography\r\n} from \"@material-ui/core\"\r\nimport { taskContext } from \"../context/taskContext\"\r\n\r\nconst ConfirmDelete = ({ open, handleClose, task_id }) => {\r\n  const { handleDelete } = useContext(taskContext)\r\n\r\n  return (\r\n    <Dialog open={open} onClose={handleClose}>\r\n      <DialogContent>\r\n        <DialogContentText component=\"div\">\r\n          <Typography variant=\"h6\" component=\"p\" color=\"textPrimary\">\r\n            Are you sure you want to delete this task?\r\n          </Typography>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"primary\">\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          onClick={_ => {\r\n            handleDelete(task_id)\r\n            handleClose()\r\n          }}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          autoFocus\r\n        >\r\n          Confirm\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default ConfirmDelete\r\n","import React from \"react\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport DateFnsUtils from \"@date-io/date-fns\"\r\nimport { MuiPickersUtilsProvider, DateTimePicker } from \"@material-ui/pickers\"\r\n\r\nconst PickDateAndTime = ({ date, handleDateTimeChange }) => {\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <Grid container justify=\"space-around\">\r\n        <DateTimePicker\r\n          variant=\"inline\"\r\n          value={date}\r\n          onChange={handleDateTimeChange}\r\n          onError={console.log}\r\n          disablePast\r\n          placeholder=\"Date and Time of activity\"\r\n          format=\"dd/mm/yyyy HH:mm\"\r\n        />\r\n      </Grid>\r\n    </MuiPickersUtilsProvider>\r\n  )\r\n}\r\n\r\nexport default PickDateAndTime\r\n","import React, { useState, useContext } from \"react\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\r\nimport DialogContent from \"@material-ui/core/DialogContent\"\r\nimport DialogActions from \"@material-ui/core/DialogActions\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Dialog from \"@material-ui/core/Dialog\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport PickDateAndTime from \"./PickDateAndTime\"\r\nimport { taskContext } from \"../context/taskContext\"\r\n\r\nconst TaskForm = ({ open, handleClose }) => {\r\n  const { addTask } = useContext(taskContext)\r\n\r\n  const [task, setTask] = useState({\r\n    title: \"\",\r\n    expTime: new Date(new Date().toISOString()),\r\n    description: \"\",\r\n    status: false\r\n  })\r\n\r\n  const handleInput = name => event =>\r\n    setTask({ ...task, [name]: event.target.value })\r\n\r\n  const handleDateTimeChange = date =>\r\n    setTask({ ...task, expTime: new Date(date).toUTCString() })\r\n\r\n  return (\r\n    <Dialog open={open} onClose={handleClose}>\r\n      <DialogTitle>Create a new activity</DialogTitle>\r\n      <DialogContent>\r\n        <Grid container component=\"form\" spacing={2}>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              name=\"title\"\r\n              type=\"text\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              placeholder=\"Activity Title\"\r\n              value={task.title}\r\n              onChange={handleInput(\"title\")}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              name=\"description\"\r\n              type=\"text\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              placeholder=\"Description\"\r\n              value={task.description}\r\n              onChange={handleInput(\"description\")}\r\n              fullWidth\r\n              multiline\r\n              rows=\"4\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs>\r\n            <PickDateAndTime\r\n              date={task.expTime}\r\n              handleDateTimeChange={handleDateTimeChange}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button color=\"primary\" onClick={handleClose}>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          autoFocus\r\n          onClick={() => {\r\n            addTask(task)\r\n            handleClose()\r\n          }}\r\n          disabled={!task.title || !task.expTime}\r\n        >\r\n          Done\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default TaskForm\r\n","import React, { useState } from \"react\"\r\nimport Fab from \"@material-ui/core/Fab\"\r\nimport AddIcon from \"@material-ui/icons/Add\"\r\nimport TaskForm from \"./TaskForm\"\r\n\r\nconst AddTask = () => {\r\n  const [open, setOpen] = useState(false)\r\n\r\n  const handleClose = () => setOpen(false)\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        position: \"fixed\",\r\n        bottom: \"15%\",\r\n        left: \"85%\"\r\n      }}\r\n    >\r\n      <Fab color=\"primary\" onClick={_ => setOpen(true)}>\r\n        <AddIcon />\r\n      </Fab>\r\n      <TaskForm open={open} handleClose={handleClose} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddTask\r\n","import React, { useContext } from \"react\"\r\nimport { Snackbar } from \"@material-ui/core\"\r\nimport Alert from \"@material-ui/lab/Alert\"\r\nimport { taskContext } from \"../context/taskContext\"\r\n\r\nconst Feedback = () => {\r\n  const { feedback, setFeedback } = useContext(taskContext)\r\n\r\n  return (\r\n    <Snackbar\r\n      open={feedback.open}\r\n      anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\r\n      autoHideDuration={3000}\r\n      onClose={_ => setFeedback({ ...feedback, open: false })}\r\n    >\r\n      <Alert severity=\"success\">{feedback.message}</Alert>\r\n    </Snackbar>\r\n  )\r\n}\r\n\r\nexport default Feedback\r\n","import React, { useContext } from \"react\"\nimport Appbar from \"./components/Appbar\"\nimport TodoList from \"./components/TodoList\"\nimport AddTask from \"./components/AddTask\"\nimport Typography from \"@material-ui/core/Typography\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport Container from \"@material-ui/core/Container\"\nimport Feedback from \"./components/Feedback\"\nimport { MuiThemeProvider } from \"@material-ui/core\"\nimport { themeContext } from \"./context/themeContext\"\n\nconst App = () => {\n  const { theme } = useContext(themeContext)\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Appbar />\n      <Container maxWidth=\"md\">\n        <br />\n        <Typography variant=\"h4\" align=\"center\">\n          The Todo App\n        </Typography>\n        <br />\n        <TodoList />\n      </Container>\n      <AddTask />\n      <Feedback />\n    </MuiThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport TaskContextProvider from \"./context/taskContext\"\nimport ThemeContextProvider from \"./context/themeContext\"\n\nReactDOM.render(\n  <ThemeContextProvider>\n    <TaskContextProvider>\n      <App />\n    </TaskContextProvider>\n  </ThemeContextProvider>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}